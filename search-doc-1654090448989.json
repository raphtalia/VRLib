[{"title":"Panel","type":0,"sectionRef":"#","url":"api/Panel","content":"On this page Panel WIP expansion for UI support, documentation to come","keywords":""},{"title":"TrackingBehavior","type":0,"sectionRef":"#","url":"api/TrackingBehavior","content":"On this page TrackingBehavior WIP expansion for UI support, documentation to come","keywords":""},{"title":"Button","type":0,"sectionRef":"#","url":"api/Button","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Button","url":"api/Button#properties","content":" "},{"title":"IsDown​","type":1,"pageTitle":"Button","url":"api/Button#IsDown","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Button.IsDown: boolean If the button is currently down.  "},{"title":"Up​","type":1,"pageTitle":"Button","url":"api/Button#Up","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Button.Up: Signal&lt;&gt; Fires when the button is released.  "},{"title":"Down​","type":1,"pageTitle":"Button","url":"api/Button#Down","content":"&lt;/&gt; Button.Down: Signal&lt;&gt; Fires when the button is pressed. "},{"title":"Functions​","type":1,"pageTitle":"Button","url":"api/Button#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Button","url":"api/Button#new","content":"&lt;/&gt; Button.new() → Button   "},{"title":"UpdateButton​","type":1,"pageTitle":"Button","url":"api/Button#UpdateButton","content":"&lt;/&gt; Button:UpdateButton(isDown: boolean) → () Updates the button's state. "},{"title":"Hand","type":0,"sectionRef":"#","url":"api/Hand","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Hand","url":"api/Hand#properties","content":" "},{"title":"Left​","type":1,"pageTitle":"Hand","url":"api/Hand#Left","content":"&lt;/&gt; Hand.Left: EnumItem  UserCFrame.LeftHand VRTouchpad.Left VibrationMotor.LeftHand  "},{"title":"Right​","type":1,"pageTitle":"Hand","url":"api/Hand#Right","content":"&lt;/&gt; Hand.Right: EnumItem  UserCFrame.RightHand VRTouchpad.Right VibrationMotor.RightHand "},{"title":"VRCamera","type":0,"sectionRef":"#","url":"api/VRCamera","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"VRCamera","url":"api/VRCamera#properties","content":" "},{"title":"Headset​","type":1,"pageTitle":"VRCamera","url":"api/VRCamera#Headset","content":"&lt;/&gt; VRCamera.Headset: Headset Reference to the headset that the camera is tracking.  "},{"title":"Height​","type":1,"pageTitle":"VRCamera","url":"api/VRCamera#Height","content":"&lt;/&gt; VRCamera.Height: number The vertical offset used to match the in-game floor to the real-life floor. This is not always the same as the height of the person.  "},{"title":"WorldCFrame​","type":1,"pageTitle":"VRCamera","url":"api/VRCamera#WorldCFrame","content":"&lt;/&gt; VRCamera.WorldCFrame: CFrame  The in-game rotation and floor position of the camera. This can be thought of as the location of the base of the camera.  "},{"title":"WorldPosition​","type":1,"pageTitle":"VRCamera","url":"api/VRCamera#WorldPosition","content":"&lt;/&gt; VRCamera.WorldPosition: Vector3  The in-game floor position of the camera.  "},{"title":"HeadCFrame​","type":1,"pageTitle":"VRCamera","url":"api/VRCamera#HeadCFrame","content":"unreleased &lt;/&gt; VRCamera.HeadCFrame: CFrame  The in-game rotation and position of the headset. This isCFrame.new(0, VRCamera.Height, 0) * VRCamera.WorldCFrame * VRCamera.Headset.UserCFrame.  "},{"title":"HeadPosition​","type":1,"pageTitle":"VRCamera","url":"api/VRCamera#HeadPosition","content":"unreleased &lt;/&gt; VRCamera.HeadPosition: Vector3  The in-game position of the headset.  "},{"title":"Destroying​","type":1,"pageTitle":"VRCamera","url":"api/VRCamera#Destroying","content":"&lt;/&gt; VRCamera.Destroying: Signal&lt;&gt; Fires while Destroy() is executing. "},{"title":"Functions​","type":1,"pageTitle":"VRCamera","url":"api/VRCamera#functions","content":" "},{"title":"new​","type":1,"pageTitle":"VRCamera","url":"api/VRCamera#new","content":"&lt;/&gt; VRCamera.new(headset: Headset) → VRCamera   "},{"title":"Destroy​","type":1,"pageTitle":"VRCamera","url":"api/VRCamera#Destroy","content":"&lt;/&gt; VRCamera:Destroy() → ()  "},{"title":"Headset","type":0,"sectionRef":"#","url":"api/Headset","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Headset","url":"api/Headset#properties","content":" "},{"title":"UserCFrame​","type":1,"pageTitle":"Headset","url":"api/Headset#UserCFrame","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Headset.UserCFrame: CFrame  The real-life position and rotation of the headset.  "},{"title":"UserPosition​","type":1,"pageTitle":"Headset","url":"api/Headset#UserPosition","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Headset.UserPosition: Vector3  The real-life position of the headset.  "},{"title":"Velocity​","type":1,"pageTitle":"Headset","url":"api/Headset#Velocity","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Headset.Velocity: Vector3  Headset's change in position over time.  "},{"title":"Destroying​","type":1,"pageTitle":"Headset","url":"api/Headset#Destroying","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Headset.Destroying: Signal&lt;&gt; Fires while Destroy() is executing. "},{"title":"Functions​","type":1,"pageTitle":"Headset","url":"api/Headset#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Headset","url":"api/Headset#new","content":"&lt;/&gt; Headset.new() → Headset   "},{"title":"Destroy​","type":1,"pageTitle":"Headset","url":"api/Headset#Destroy","content":"&lt;/&gt; Headset:Destroy() → ()   "},{"title":"Recenter​","type":1,"pageTitle":"Headset","url":"api/Headset#Recenter","content":"&lt;/&gt; Headset:Recenter() → () Equivalent to UserInputService:RecenterUserHeadCFrame() and VRService:RecenterUserHeadCFrame(). "},{"title":"VRLib","type":0,"sectionRef":"#","url":"api/VRLib","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"VRLib","url":"api/VRLib#types","content":" "},{"title":"Controllers​","type":1,"pageTitle":"VRLib","url":"api/VRLib#Controllers","content":"&lt;/&gt; interface Controllers { Quest2: Quest2Controller }   "},{"title":"ControllerAdornees​","type":1,"pageTitle":"VRLib","url":"api/VRLib#ControllerAdornees","content":"&lt;/&gt; interface ControllerAdornees { Quest2: Quest2ControllerAdornee }   "},{"title":"UI​","type":1,"pageTitle":"VRLib","url":"api/VRLib#UI","content":"&lt;/&gt; interface UI { TrackingBehavior: TrackingBehavior Panel: Panel }  "},{"title":"Properties​","type":1,"pageTitle":"VRLib","url":"api/VRLib#properties","content":" "},{"title":"Hand​","type":1,"pageTitle":"VRLib","url":"api/VRLib#Hand","content":"&lt;/&gt; VRLib.Hand: Hand   "},{"title":"Headset​","type":1,"pageTitle":"VRLib","url":"api/VRLib#Headset","content":"&lt;/&gt; VRLib.Headset: Headset   "},{"title":"VRCamera​","type":1,"pageTitle":"VRLib","url":"api/VRLib#VRCamera","content":"&lt;/&gt; VRLib.VRCamera: VRCamera   "},{"title":"LaserPointer​","type":1,"pageTitle":"VRLib","url":"api/VRLib#LaserPointer","content":"&lt;/&gt; VRLib.LaserPointer: LaserPointer  "},{"title":"Functions​","type":1,"pageTitle":"VRLib","url":"api/VRLib#functions","content":" "},{"title":"waitForUserCFrameAsync​","type":1,"pageTitle":"VRLib","url":"api/VRLib#waitForUserCFrameAsync","content":"&lt;/&gt; VRLib.waitForUserCFrameAsync(userCFrame: UserCFrame ) → Promise&lt;void&gt;  "},{"title":"Quest2ControllerAdornee","type":0,"sectionRef":"#","url":"api/Quest2ControllerAdornee","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Quest2ControllerAdornee","url":"api/Quest2ControllerAdornee#properties","content":" "},{"title":"Controller​","type":1,"pageTitle":"Quest2ControllerAdornee","url":"api/Quest2ControllerAdornee#Controller","content":"&lt;/&gt; Quest2ControllerAdornee.Controller: Quest2Controller Reference to the controller that this object is currently adorning.  "},{"title":"Model​","type":1,"pageTitle":"Quest2ControllerAdornee","url":"api/Quest2ControllerAdornee#Model","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Quest2ControllerAdornee.Model: Model  The adornee model controlled by this object.  "},{"title":"RootPart​","type":1,"pageTitle":"Quest2ControllerAdornee","url":"api/Quest2ControllerAdornee#RootPart","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Quest2ControllerAdornee.RootPart: BasePart  The adornee model's PrimaryPart.  "},{"title":"Destroying​","type":1,"pageTitle":"Quest2ControllerAdornee","url":"api/Quest2ControllerAdornee#Destroying","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Quest2ControllerAdornee.Destroying: Signal&lt;&gt; Fires while Destroy() is executing. "},{"title":"Functions​","type":1,"pageTitle":"Quest2ControllerAdornee","url":"api/Quest2ControllerAdornee#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Quest2ControllerAdornee","url":"api/Quest2ControllerAdornee#new","content":"&lt;/&gt; Quest2ControllerAdornee.new( controller: Quest2Controller, controllers: Instance ) → Quest2ControllerAdornee Due to Rojo currently not supporting meshes#534, the controllers found in the assets directory of the repository must be passed in as an argument.  "},{"title":"Destroy​","type":1,"pageTitle":"Quest2ControllerAdornee","url":"api/Quest2ControllerAdornee#Destroy","content":"&lt;/&gt; Quest2ControllerAdornee:Destroy() → ()  "},{"title":"LaserPointer","type":0,"sectionRef":"#","url":"api/LaserPointer","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"LaserPointer","url":"api/LaserPointer#properties","content":" "},{"title":"Controller​","type":1,"pageTitle":"LaserPointer","url":"api/LaserPointer#Controller","content":"&lt;/&gt; LaserPointer.Controller: Quest2Controller Reference to the controller that the laser pointer is tracking.  "},{"title":"RootPart​","type":1,"pageTitle":"LaserPointer","url":"api/LaserPointer#RootPart","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; LaserPointer.RootPart: BasePart  The container for the effects of the laser pointer.  "},{"title":"Length​","type":1,"pageTitle":"LaserPointer","url":"api/LaserPointer#Length","content":"&lt;/&gt; LaserPointer.Length: number The length of the laser pointer.  "},{"title":"Visible​","type":1,"pageTitle":"LaserPointer","url":"api/LaserPointer#Visible","content":"&lt;/&gt; LaserPointer.Visible: boolean Whether the laser pointer is visible.  "},{"title":"RaycastParams​","type":1,"pageTitle":"LaserPointer","url":"api/LaserPointer#RaycastParams","content":"&lt;/&gt; LaserPointer.RaycastParams: RaycastParams The parameters used to raycast with.  "},{"title":"RaycastResult​","type":1,"pageTitle":"LaserPointer","url":"api/LaserPointer#RaycastResult","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; LaserPointer.RaycastResult: RaycastResult The result of the last raycast.  "},{"title":"Destroying​","type":1,"pageTitle":"LaserPointer","url":"api/LaserPointer#Destroying","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; LaserPointer.Destroying: Signal&lt;&gt; Fires while Destroy() is executing. "},{"title":"Functions​","type":1,"pageTitle":"LaserPointer","url":"api/LaserPointer#functions","content":" "},{"title":"new​","type":1,"pageTitle":"LaserPointer","url":"api/LaserPointer#new","content":"&lt;/&gt; LaserPointer.new(controller: Quest2Controller) → LaserPointer   "},{"title":"Destroy​","type":1,"pageTitle":"LaserPointer","url":"api/LaserPointer#Destroy","content":"&lt;/&gt; LaserPointer:Destroy() → ()  "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"docs/intro","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Getting Started","url":"docs/intro#installation","content":"VRLib can be installed with Wally by adding it to the [dependencies] section of yourwally.toml file. [package] name = &quot;your_name/your_project&quot; version = &quot;0.1.0&quot; registry = &quot;https://github.com/UpliftGames/wally-index&quot; realm = &quot;shared&quot; [dependencies] VRLib = &quot;raphtalia/vrlib@^1&quot; Copy "},{"title":"Usage​","type":1,"pageTitle":"Getting Started","url":"docs/intro#usage","content":"Below is an example of an extremely simple movement controller for the Quest 2. local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local VRLib = require(ReplicatedStorage.Packages.VRLib) -- Wait for the VR devices to be ready (turn them on and connect them) VRLib.waitForUserCFrameAsync(Enum.UserCFrame.Head):expect() VRLib.waitForUserCFrameAsync(Enum.UserCFrame.LeftHand):expect() VRLib.waitForUserCFrameAsync(Enum.UserCFrame.RightHand):expect() -- Create the interfaces for the VR devices local leftController = VRLib.Controllers.Quest2.new(VRLib.Hand.Left) local rightController = VRLib.Controllers.Quest2.new(VRLib.Hand.Right) local headset = VRLib.Headset.new() -- Override Roblox's default VR camera local vrCamera = VRLib.VRCamera.new(headset) -- Create the lasers and make them invisible by default local leftLaser = VRLib.LaserPointer.new(leftController) leftLaser.Visible = false local rightLaser = VRLib.LaserPointer.new(rightController) rightLaser.Visible = false --[[ Holding down the index triggers on the controllers toggle a laser pointer that teleport the player to where the laser hits. ]] leftController.Inputs.IndexTrigger.FullyDown:Connect(function() leftLaser.Visible = true end) leftController.Inputs.IndexTrigger.Up:Connect(function() leftLaser.Visible = false if leftLaser.RaycastResult then vrCamera.WorldPosition = leftLaser.RaycastResult.Position end end) rightController.Inputs.IndexTrigger.FullyDown:Connect(function() rightLaser.Visible = true end) rightController.Inputs.IndexTrigger.Up:Connect(function() rightLaser.Visible = false if rightLaser.RaycastResult then vrCamera.WorldPosition = rightLaser.RaycastResult.Position end end) Copy "},{"title":"Controller Support​","type":1,"pageTitle":"Getting Started","url":"docs/intro#controller-support","content":"Headset support should work across the board while controller support is more difficult due to different input schemes and varying levels of support from Roblox themselves. ✅ - Fully supported⚠️ - Partially supported🔜 - Not yet supported❌ - Will not be supported Controllers\tStatus\tNotesOculus Touch\t✅ Valve Index\t⚠️\tRoblox maps the grip pressure sensors to buttons. HTC Vive\t🔜\tCompletely untested. "},{"title":"Thumbstick","type":0,"sectionRef":"#","url":"api/Thumbstick","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Thumbstick","url":"api/Thumbstick#properties","content":" "},{"title":"RawLocation​","type":1,"pageTitle":"Thumbstick","url":"api/Thumbstick#RawLocation","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Thumbstick.RawLocation: Vector2  The unprocessed location of the thumbstick. This means the location could have a negative magnitude or greater than 1.  "},{"title":"Location​","type":1,"pageTitle":"Thumbstick","url":"api/Thumbstick#Location","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Thumbstick.Location: Vector2  Location is garunteed to have a magnitude of 0 when at rest and a magnitude of 1 when past the edge threshold.  "},{"title":"EdgeThreshold​","type":1,"pageTitle":"Thumbstick","url":"api/Thumbstick#EdgeThreshold","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Thumbstick.EdgeThreshold: number The threshold at which the thumbstick is considered to be at the edge.  "},{"title":"IsDown​","type":1,"pageTitle":"Thumbstick","url":"api/Thumbstick#IsDown","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Thumbstick.IsDown: boolean If the thumbstick is currently down.  "},{"title":"IsEdge​","type":1,"pageTitle":"Thumbstick","url":"api/Thumbstick#IsEdge","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Thumbstick.IsEdge: boolean If the thumbstick is at the edge.  "},{"title":"Up​","type":1,"pageTitle":"Thumbstick","url":"api/Thumbstick#Up","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Thumbstick.Up: Signal&lt;&gt; Fires when the thumbstick's is released as a button.  "},{"title":"Down​","type":1,"pageTitle":"Thumbstick","url":"api/Thumbstick#Down","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Thumbstick.Down: Signal&lt;&gt; Fires when the thumbstick's is pressed as a button.  "},{"title":"Released​","type":1,"pageTitle":"Thumbstick","url":"api/Thumbstick#Released","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Thumbstick.Released: Signal&lt;&gt; Fires when the thumbstick returns to center.  "},{"title":"Changed​","type":1,"pageTitle":"Thumbstick","url":"api/Thumbstick#Changed","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Thumbstick.Changed: Signal&lt;( loc: Vector2 , delta: Vector2 )&gt; Fires when the thumbstick's location changes.  "},{"title":"EdgeEntered​","type":1,"pageTitle":"Thumbstick","url":"api/Thumbstick#EdgeEntered","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Thumbstick.EdgeEntered: Signal&lt;&gt; Fires when the thumbstick enters the edge.  "},{"title":"EdgeLeft​","type":1,"pageTitle":"Thumbstick","url":"api/Thumbstick#EdgeLeft","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Thumbstick.EdgeLeft: Signal&lt;&gt; Fires when the thumbstick leaves the edge. "},{"title":"Functions​","type":1,"pageTitle":"Thumbstick","url":"api/Thumbstick#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Thumbstick","url":"api/Thumbstick#new","content":"&lt;/&gt; Thumbstick.new(edgeThreshold: number) → Thumbstick   "},{"title":"UpdateLocationAbsolute​","type":1,"pageTitle":"Thumbstick","url":"api/Thumbstick#UpdateLocationAbsolute","content":"&lt;/&gt; Thumbstick:UpdateLocationAbsolute(loc: Vector2 ) → () Updates the location of the thumbstick by an absolute value.  "},{"title":"UpdateLocationDelta​","type":1,"pageTitle":"Thumbstick","url":"api/Thumbstick#UpdateLocationDelta","content":"&lt;/&gt; Thumbstick:UpdateLocationDelta(delta: Vector2 ) → () Updates the location of the thumbstick by a relative value.  "},{"title":"UpdateButton​","type":1,"pageTitle":"Thumbstick","url":"api/Thumbstick#UpdateButton","content":"&lt;/&gt; Thumbstick:UpdateButton(isDown: boolean) → () Updates the state of the thumbstick as a button.  "},{"title":"SetEdgeThreshold​","type":1,"pageTitle":"Thumbstick","url":"api/Thumbstick#SetEdgeThreshold","content":"&lt;/&gt; Thumbstick:SetEdgeThreshold(edgeThreshold: number) → () Updates the edge threshold of the thumbstick. "},{"title":"Trigger","type":0,"sectionRef":"#","url":"api/Trigger","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Trigger","url":"api/Trigger#properties","content":" "},{"title":"RawPosition​","type":1,"pageTitle":"Trigger","url":"api/Trigger#RawPosition","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Trigger.RawPosition: number The unprocessed position of the trigger. This means the position could be negative or greater than 1.  "},{"title":"Position​","type":1,"pageTitle":"Trigger","url":"api/Trigger#Position","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Trigger.Position: number Position is garunteed to be 0 when at rest and at 1 when past the threshold.  "},{"title":"TriggerThreshold​","type":1,"pageTitle":"Trigger","url":"api/Trigger#TriggerThreshold","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Trigger.TriggerThreshold: number The threshold at which the trigger is considered to be fully down.  "},{"title":"IsDown​","type":1,"pageTitle":"Trigger","url":"api/Trigger#IsDown","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Trigger.IsDown: boolean If the trigger is down at all.  "},{"title":"IsFullyDown​","type":1,"pageTitle":"Trigger","url":"api/Trigger#IsFullyDown","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Trigger.IsFullyDown: boolean If the trigger is fully down.  "},{"title":"Up​","type":1,"pageTitle":"Trigger","url":"api/Trigger#Up","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Trigger.Up: Signal&lt;&gt; Fires when the trigger is released from the fully down position.  "},{"title":"Down​","type":1,"pageTitle":"Trigger","url":"api/Trigger#Down","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Trigger.Down: Signal&lt;&gt; Fires when the trigger is initially pressed.  "},{"title":"FullyUp​","type":1,"pageTitle":"Trigger","url":"api/Trigger#FullyUp","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Trigger.FullyUp: Signal&lt;&gt; Fires when the trigger is released fully.  "},{"title":"FullyDown​","type":1,"pageTitle":"Trigger","url":"api/Trigger#FullyDown","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Trigger.FullyDown: Signal&lt;&gt; Fires when the trigger is fully pressed.  "},{"title":"Changed​","type":1,"pageTitle":"Trigger","url":"api/Trigger#Changed","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Trigger.Changed: Signal&lt;( pos: number, delta: number )&gt; Fires when the trigger's position changes. "},{"title":"Functions​","type":1,"pageTitle":"Trigger","url":"api/Trigger#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Trigger","url":"api/Trigger#new","content":"&lt;/&gt; Trigger.new(threshold: number?) → Trigger   "},{"title":"UpdateTriggerAbsolute​","type":1,"pageTitle":"Trigger","url":"api/Trigger#UpdateTriggerAbsolute","content":"&lt;/&gt; Trigger:UpdateTriggerAbsolute(pos: number) → () Updates the position of the trigger by an absolute value.  "},{"title":"UpdateTriggerDelta​","type":1,"pageTitle":"Trigger","url":"api/Trigger#UpdateTriggerDelta","content":"&lt;/&gt; Trigger:UpdateTriggerDelta(delta: number) → () Updates the position of the trigger by a relative value.  "},{"title":"SetTriggerThreshold​","type":1,"pageTitle":"Trigger","url":"api/Trigger#SetTriggerThreshold","content":"&lt;/&gt; Trigger:SetTriggerThreshold(threshold: number) → () Sets the threshold at which the trigger is considered to be fully down. "},{"title":"Quest2Controller","type":0,"sectionRef":"#","url":"api/Quest2Controller","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Quest2Controller","url":"api/Quest2Controller#types","content":" "},{"title":"Inputs​","type":1,"pageTitle":"Quest2Controller","url":"api/Quest2Controller#Inputs","content":"&lt;/&gt; interface Inputs { GripTrigger: Trigger IndexTrigger: Trigger Thumbstick: Thumbstick Button1: Button Button2: Button } Table of input objects tied to the controller. "},{"title":"Properties​","type":1,"pageTitle":"Quest2Controller","url":"api/Quest2Controller#properties","content":" "},{"title":"UserCFrame​","type":1,"pageTitle":"Quest2Controller","url":"api/Quest2Controller#UserCFrame","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Quest2Controller.UserCFrame: CFrame  The real-life position and rotation of the controller.  "},{"title":"UserPosition​","type":1,"pageTitle":"Quest2Controller","url":"api/Quest2Controller#UserPosition","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Quest2Controller.UserPosition: Vector3  The real-life position of the controller.  "},{"title":"WorldCFrame​","type":1,"pageTitle":"Quest2Controller","url":"api/Quest2Controller#WorldCFrame","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Quest2Controller.WorldCFrame: CFrame  The in-game rotation and position of the controller.  "},{"title":"WorldPosition​","type":1,"pageTitle":"Quest2Controller","url":"api/Quest2Controller#WorldPosition","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Quest2Controller.WorldPosition: Vector3  The in-game position of the controller.  "},{"title":"Velocity​","type":1,"pageTitle":"Quest2Controller","url":"api/Quest2Controller#Velocity","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Quest2Controller.Velocity: Vector3  Controller's change in position over time.  "},{"title":"Hand​","type":1,"pageTitle":"Quest2Controller","url":"api/Quest2Controller#Hand","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Quest2Controller.Hand: Hand The hand the controller is tracking.  "},{"title":"GamepadNum​","type":1,"pageTitle":"Quest2Controller","url":"api/Quest2Controller#GamepadNum","content":"&lt;/&gt; Quest2Controller.GamepadNum: UserInputType  The ID of the gamepad the controller is identified as.  "},{"title":"TouchpadMode​","type":1,"pageTitle":"Quest2Controller","url":"api/Quest2Controller#TouchpadMode","content":"&lt;/&gt; Quest2Controller.TouchpadMode: VRTouchpadMode  The mode of the controller's touchpad.  "},{"title":"VibrationValue​","type":1,"pageTitle":"Quest2Controller","url":"api/Quest2Controller#VibrationValue","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Quest2Controller.VibrationValue: number The vibration intensity of the controller on a scale of 0 to 1.  "},{"title":"Destroying​","type":1,"pageTitle":"Quest2Controller","url":"api/Quest2Controller#Destroying","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Quest2Controller.Destroying: Signal&lt;&gt; Fires while Destroy() is executing. "},{"title":"Functions​","type":1,"pageTitle":"Quest2Controller","url":"api/Quest2Controller#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Quest2Controller","url":"api/Quest2Controller#new","content":"&lt;/&gt; Quest2Controller.new( hand: Hand, gamepadNum: UserInputType? ) → Quest2Controller   "},{"title":"Destroy​","type":1,"pageTitle":"Quest2Controller","url":"api/Quest2Controller#Destroy","content":"&lt;/&gt; Quest2Controller:Destroy() → ()   "},{"title":"SetMotor​","type":1,"pageTitle":"Quest2Controller","url":"api/Quest2Controller#SetMotor","content":"&lt;/&gt; Quest2Controller:SetMotor(vibrationValue: number) → () Updates the controller's vibration intensity.  "},{"title":"Vibrate​","type":1,"pageTitle":"Quest2Controller","url":"api/Quest2Controller#Vibrate","content":"&lt;/&gt; Quest2Controller:Vibrate( vibrationValue: number, duration: number ) → Promise&lt;void&gt; Vibrates the controller for a limited amount of time, can be cancelled from the returned promise. "}]