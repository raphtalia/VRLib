"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[671],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,f=d["".concat(s,".").concat(m)]||d[m]||p[m]||l;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var c=2;c<l;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},59881:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var r=n(87462),a=n(63366),l=(n(67294),n(3905)),i=["components"],o={sidebar_position:1},s="Getting Started",c={unversionedId:"intro",id:"intro",isDocsHomePage:!1,title:"Getting Started",description:"VRLib aims to eventually standardize and simplify interfacing with VR hardware and user interfaces.",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/VRLib/docs/intro",editUrl:"https://github.com/raphtalia/VRLib/edit/main/docs/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"defaultSidebar"},u=[{value:"Installation",id:"installation",children:[],level:2},{value:"Usage",id:"usage",children:[],level:2},{value:"Controller Support",id:"controller-support",children:[],level:2}],p={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,l.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"getting-started"},"Getting Started"),(0,l.kt)("p",null,"VRLib aims to eventually standardize and simplify interfacing with VR hardware and user interfaces."),(0,l.kt)("h2",{id:"installation"},"Installation"),(0,l.kt)("p",null,"VRLib can be installed with ",(0,l.kt)("a",{parentName:"p",href:"https://wally.run"},"Wally")," by adding it to the ",(0,l.kt)("inlineCode",{parentName:"p"},"[dependencies]")," section of your\n",(0,l.kt)("inlineCode",{parentName:"p"},"wally.toml")," file."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-toml"},'[package]\nname = "your_name/your_project"\nversion = "0.1.0"\nregistry = "https://github.com/UpliftGames/wally-index"\nrealm = "shared"\n\n[dependencies]\nVRLib = "raphtalia/vrlib@^1"\n')),(0,l.kt)("h2",{id:"usage"},"Usage"),(0,l.kt)("p",null,"Below is an example of an extremely simple movement controller for the Quest 2."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'local ReplicatedStorage = game:GetService("ReplicatedStorage")\nlocal VRLib = require(ReplicatedStorage.Packages.VRLib)\n\n-- Wait for the VR devices to be ready (turn them on and connect them)\nVRLib.waitForUserCFrameAsync(Enum.UserCFrame.Head):expect()\nVRLib.waitForUserCFrameAsync(Enum.UserCFrame.LeftHand):expect()\nVRLib.waitForUserCFrameAsync(Enum.UserCFrame.RightHand):expect()\n\n-- Create the interfaces for the VR devices\nlocal leftController = VRLib.Controllers.Quest2.new(VRLib.Hand.Left)\nlocal rightController = VRLib.Controllers.Quest2.new(VRLib.Hand.Right)\nlocal headset = VRLib.Headset.new()\n\n-- Override Roblox\'s default VR camera\nlocal vrCamera = VRLib.VRCamera.new(headset)\n\n-- Create the lasers and make them invisible by default\nlocal leftLaser = VRLib.LaserPointer.new(leftController)\nleftLaser.Visible = false\nlocal rightLaser = VRLib.LaserPointer.new(rightController)\nrightLaser.Visible = false\n\n--[[\n    Holding down the index triggers on the controllers toggle a laser pointer\n    that teleport the player to where the laser hits.\n]]\nleftController.Inputs.IndexTrigger.FullyDown:Connect(function()\n    leftLaser.Visible = true\nend)\nleftController.Inputs.IndexTrigger.Up:Connect(function()\n    leftLaser.Visible = false\n    if leftLaser.RaycastResult then\n        vrCamera.WorldPosition = leftLaser.RaycastResult.Position\n    end\nend)\n\nrightController.Inputs.IndexTrigger.FullyDown:Connect(function()\n    rightLaser.Visible = true\nend)\n\nrightController.Inputs.IndexTrigger.Up:Connect(function()\n    rightLaser.Visible = false\n    if rightLaser.RaycastResult then\n        vrCamera.WorldPosition = rightLaser.RaycastResult.Position\n    end\nend)\n')),(0,l.kt)("h2",{id:"controller-support"},"Controller Support"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u2705 - Fully supported"),(0,l.kt)("li",{parentName:"ul"},"\u26a0\ufe0f - Partially supported"),(0,l.kt)("li",{parentName:"ul"},"\ud83d\udd1c - Not yet supported"),(0,l.kt)("li",{parentName:"ul"},"\u274c - Will not be supported")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Headset"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Status"),(0,l.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},"Oculus Touch"),(0,l.kt)("td",{parentName:"tr",align:"center"},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},"Valve Index"),(0,l.kt)("td",{parentName:"tr",align:"center"},"\u26a0\ufe0f"),(0,l.kt)("td",{parentName:"tr",align:null},"Roblox maps the grip pressure sensors to buttons.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},"HTC Vive"),(0,l.kt)("td",{parentName:"tr",align:"center"},"\ud83d\udd1c"),(0,l.kt)("td",{parentName:"tr",align:null},"Completely untested.")))))}d.isMDXComponent=!0}}]);